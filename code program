/*
// Sample code to perform I/O:

cin >> name;                            // Reading input from STDIN
cout << "Hi, " << name << ".\n";        // Writing output to STDOUT

// Warning: Printing unwanted or ill-formatted data to output will cause the test cases to fail
*/

// Write your code here
#include<iostream>
#include<vector>
#include<queue>
using namespace std;
 

    int main()
    {
        int x, y, n,ans=0;
        cin >> n;
        vector <int> v[n+1];//Number of nodes
               //Number of edges
        for(int i = 0;i < n-1;++i)
        {
                cin >> x >> y;
            v[x].push_back(y); 
            v[y].push_back(x);//Insert y in adjacency list of x
         }


int l;
cin>>l;
    
       //Vector for maintaining adjacency list explained above
    int level[n+1]; //To determine the level of each node
    bool vis[n+1]; //Mark the node if visited 
    for(int i=1; i<n+1; i++)
        vis[i]=false;
        queue <int> q;
        q.push(1);
        level[ 1 ] = 1 ;  //Setting the level of the source node as 0
        vis[ 1 ] = true;
        while(!q.empty())
        {
            int p = q.front();
            q.pop();
            for(int i = 0;i < v[ p ].size() ; i++)
            {
                if(vis[ v[ p ][ i ] ] == false)
                {
            //Setting the level of each node with an increment in the level of parent node
                    level[ v[ p ][ i ] ] = level[ p ]+1;
                    if(level[ v[ p ][ i ] ]==l)
                    ans=ans+1;
                     q.push(v[ p ][ i ]);
                     vis[ v[ p ][ i ] ] = true;
      }
            }
        }cout<<ans;
    
    
}
